import logging
import random
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from dotenv import load_dotenv
load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
env_path = r"C:\Users\aleks\Desktop\bot\.env"
TOKEN = os.getenv("TOKEN")
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD")
ADMIN_ID = os.getenv("ADMIN_ID")
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


chat_links = {
    "–û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç": "https://t.me/+w6IB3NeDijtlNjkyt",
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ—Å—É—Ä—Å": "https://t.me/your_secondary_chat"
}
chat_ids = set()
current_delay_range = (25, 30)  # –≤ –º–∏–Ω—É—Ç–∞—Ö, –º–∏–Ω–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞
current_message = """–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!  
–Ø ‚Äî –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞. –ü—Ä–∏–≥–ª–∞—à–∞—é –≤–∞—Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º—É —Ä–µ—Å—É—Ä—Å—É, –≥–¥–µ –≤—ã –Ω–∞–π–¥—ë—Ç–µ –µ—â—ë –±–æ–ª—å—à–µ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.  
–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ —Å–∞–º—ã—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏!

https://t.me/+w6IB3NeDijtlNjky

–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–∏—à–∏—Ç–µ @borz_911"""
is_sending_active = False

# –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á —Ä–∞—Å—Å—ã–ª–∫–∏
job_sending = None


def create_keyboard(buttons, back_button=True):
    if not buttons:
        buttons = []
    elif not isinstance(buttons[0], list):
        buttons = [buttons]
    if back_button:
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')])
    return InlineKeyboardMarkup(buttons)


async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"):
    keyboard = [
        [InlineKeyboardButton("üîó –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç—ã", callback_data='get_chat_links')]
    ]
    if update.effective_user.id == ADMIN_ID:
        keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')])
    reply_markup = create_keyboard(keyboard, back_button=False)
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=reply_markup)


async def show_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    sending_status = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if is_sending_active else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞"
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data='edit_message')],
        [InlineKeyboardButton("‚è± –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É", callback_data='edit_delay')],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç (–ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)", callback_data='add_chat')],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –≤—Ä—É—á–Ω—É—é (ID –∏–ª–∏ —Å—Å—ã–ª–∫–∞)", callback_data='add_chat_manual')],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data='list_chats')],
        [InlineKeyboardButton("üîó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞–º–∏", callback_data='manage_links')],
        [InlineKeyboardButton(f"üîÑ –†–∞—Å—Å—ã–ª–∫–∞: {sending_status}", callback_data='toggle_sending')]
    ]
    await update.callback_query.edit_message_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=create_keyboard(keyboard))


async def show_links_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data='add_link')],
        [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data='remove_link')],
        [InlineKeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫", callback_data='view_links')]
    ]
    await update.callback_query.edit_message_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞–º–∏:", reply_markup=create_keyboard(keyboard))


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_main_menu(update, context)


async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global ADMIN_ID
    if not context.args or context.args[0] != ADMIN_PASSWORD:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
        return
    ADMIN_ID = update.effective_user.id
    context.user_data['admin_authenticated'] = True
    await update.message.reply_text(f"‚úÖ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω (ID: {ADMIN_ID})")
    await show_main_menu(update, context)


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global is_sending_active, job_sending

    query = update.callback_query
    await query.answer()
    try:
        if query.data == 'back':
            await show_main_menu(update, context)
        elif query.data == 'get_chat_links':
            if not chat_links:
                await query.edit_message_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤")
            else:
                keyboard = [[InlineKeyboardButton(name, url=link)] for name, link in chat_links.items()]
                await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç:", reply_markup=create_keyboard(keyboard, back_button=True))
        elif query.data == 'admin_panel':
            await show_admin_panel(update, context)
        elif query.data == 'add_chat':
            context.user_data['awaiting_chat'] = True
            await query.edit_message_text("–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞, –∫—É–¥–∞ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É:", reply_markup=create_keyboard([]))
        elif query.data == 'add_chat_manual':
            context.user_data['awaiting_chat_manual'] = True
            await query.edit_message_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID —á–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, -1001234567890) –∏–ª–∏ —Å—Å—ã–ª–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://t.me/username):", reply_markup=create_keyboard([]))
        elif query.data == 'list_chats':
            if not chat_ids:
                await query.edit_message_text("–ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            else:
                text = "\n".join([f"ID: {cid}" for cid in chat_ids])
                await query.edit_message_text(f"–ß–∞—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n{text}")
        elif query.data == 'edit_message':
            context.user_data['editing_message'] = True
            await query.edit_message_text(f"–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{current_message}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", reply_markup=create_keyboard([]))
        elif query.data == 'edit_delay':
            context.user_data['editing_delay'] = True
            await query.edit_message_text(f"–¢–µ–∫—É—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {current_delay_range[0]}-{current_delay_range[1]} –º–∏–Ω\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–µ—Ä–∂–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1 2'):", reply_markup=create_keyboard([]))
        elif query.data == 'toggle_sending':
            is_sending_active = not is_sending_active
            await show_admin_panel(update, context)
            logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ {'–≤–∫–ª—é—á–µ–Ω–∞' if is_sending_active else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}")

            if is_sending_active:
                # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É —Ä–∞—Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                if job_sending:
                    job_sending.schedule_removal()
                    job_sending = None
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
                job_sending = context.job_queue.run_once(send_messages, 1)
        elif query.data == 'manage_links':
            await show_links_menu(update, context)
        elif query.data == 'add_link':
            context.user_data['adding_link'] = True
            await query.edit_message_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ|—Å—Å—ã–ª–∫–∞", reply_markup=create_keyboard([]))
        elif query.data == 'remove_link':
            if not chat_links:
                await query.edit_message_text("–ù–µ—Ç —Å—Å—ã–ª–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            else:
                keyboard = [[InlineKeyboardButton(name, callback_data=f'remove_{name}')] for name in chat_links]
                await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=create_keyboard(keyboard))
        elif query.data == 'view_links':
            if not chat_links:
                await query.edit_message_text("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫")
            else:
                links_text = "\n".join([f"{name}: {link}" for name, link in chat_links.items()])
                await query.edit_message_text(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏:\n\n{links_text}", reply_markup=create_keyboard([]))
        elif query.data.startswith('remove_'):
            link_name = query.data[7:]
            if link_name in chat_links:
                del chat_links[link_name]
                await query.edit_message_text(f"–°—Å—ã–ª–∫–∞ '{link_name}' —É–¥–∞–ª–µ–Ω–∞", reply_markup=create_keyboard([]))
            else:
                await query.answer("–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ button_handler: {e}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)


async def handle_forwarded_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("‚öôÔ∏è –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
    logger.info(f"forward_from_chat: {update.message.forward_from_chat}")
    logger.info(f"sender_chat: {update.message.sender_chat}")
    logger.info(f"forward_from: {update.message.forward_from}")

    if not context.user_data.get('awaiting_chat') or update.effective_user.id != ADMIN_ID:
        return

    chat_info = update.message.forward_from_chat or update.message.sender_chat

    if chat_info:
        if chat_info.id not in chat_ids:
            chat_ids.add(chat_info.id)
            await context.bot.send_message(chat_id=ADMIN_ID, text=f"‚úÖ –ß–∞—Ç '{chat_info.title}' –¥–æ–±–∞–≤–ª–µ–Ω (ID: {chat_info.id})")
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —á–∞—Ç: {chat_info.title} ({chat_info.id})")
        else:
            await context.bot.send_message(chat_id=ADMIN_ID, text=f"‚ÑπÔ∏è –ß–∞—Ç '{chat_info.title}' —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.")
        context.user_data.pop('awaiting_chat', None)
    else:
        await update.message.reply_text("‚ùå –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑ –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∫–∞–Ω–∞–ª–∞, –∞ –Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")


async def handle_admin_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global current_message, current_delay_range

    if update.effective_user.id != ADMIN_ID:
        return

    text = update.message.text.strip()

    if context.user_data.get('editing_message'):
        current_message = text
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        context.user_data.pop('editing_message', None)

    elif context.user_data.get('editing_delay'):
        try:
            parts = text.split()
            if len(parts) != 2:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
            min_d, max_d = map(int, parts)
            if min_d < 1 or max_d < 1:
                raise ValueError("–ó–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏")
            current_delay_range = (min(min_d, max_d), max(min_d, max_d))
            await update.message.reply_text(f"‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {current_delay_range[0]}-{current_delay_range[1]} –º–∏–Ω")
        except Exception:
            await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –º–∏–Ω –º–∞–∫—Å (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞)")
        context.user_data.pop('editing_delay', None)

    elif context.user_data.get('adding_link'):
        try:
            name, link = text.split('|', 1)
            chat_links[name.strip()] = link.strip()
            await update.message.reply_text(f"‚úÖ –°—Å—ã–ª–∫–∞ '{name.strip()}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ|—Å—Å—ã–ª–∫–∞")
        context.user_data.pop('adding_link', None)

    elif context.user_data.get('awaiting_chat_manual'):
        input_str = text
        chat = None
        try:
            if input_str.startswith("https://t.me/") or input_str.startswith("t.me/"):
                username = input_str.split('/')[-1]
                chat = await context.bot.get_chat(username)
            else:
                chat_id = int(input_str)
                chat = await context.bot.get_chat(chat_id)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ:\n{e}")
            context.user_data.pop('awaiting_chat_manual', None)
            return

        if chat:
            if chat.id not in chat_ids:
                chat_ids.add(chat.id)
                await update.message.reply_text(f"‚úÖ –ß–∞—Ç '{chat.title}' –¥–æ–±–∞–≤–ª–µ–Ω (ID: {chat.id})")
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —á–∞—Ç –≤—Ä—É—á–Ω—É—é: {chat.title} ({chat.id})")
            else:
                await update.message.reply_text(f"‚ÑπÔ∏è –ß–∞—Ç '{chat.title}' —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.")
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç.")

        context.user_data.pop('awaiting_chat_manual', None)


async def send_messages(context: ContextTypes.DEFAULT_TYPE):
    global is_sending_active, job_sending

    logger.info("send_messages –≤—ã–∑–≤–∞–Ω–∞")

    if not is_sending_active:
        logger.info("–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É.")
        job_sending = None
        return

    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ {len(chat_ids)} —á–∞—Ç(–æ–≤).")

    remove_ids = set()
    for chat_id in list(chat_ids):
        try:
            await context.bot.send_message(chat_id=chat_id, text=current_message, disable_web_page_preview=True)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: {e}")
            # –£–¥–∞–ª—è–µ–º —á–∞—Ç –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –∏–ª–∏ —á–∞—Ç —É–¥–∞–ª—ë–Ω
            if "not enough rights" in str(e).lower() or "chat not found" in str(e).lower():
                remove_ids.add(chat_id)

    for cid in remove_ids:
        chat_ids.discard(cid)
        logger.info(f"–£–¥–∞–ª—ë–Ω —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {cid}")

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ä–∞—Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ –∑–∞–¥–µ—Ä–∂–∫—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    delay = random.randint(*current_delay_range) * 60
    logger.info(f"–°–ª–µ–¥—É—é—â–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —á–µ—Ä–µ–∑ {delay // 60} –º–∏–Ω—É—Ç.")
    job_sending = context.job_queue.run_once(send_messages, delay)


def main():
    global job_sending

    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_command))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_admin_text))
    application.add_handler(MessageHandler(filters.FORWARDED, handle_forwarded_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ (–µ—Å–ª–∏ is_sending_active=True)
    def start_sending_job(context):
        global job_sending
        if is_sending_active:
            job_sending = context.job_queue.run_once(send_messages, 1)

    application.job_queue.run_once(start_sending_job, 5)

    application.run_polling()


if __name__ == '__main__':
    main()
